---
layout:     post
title:      "Pub/Sub模式"
subtitle:   "学习笔记"
date:       2016-03-17
author:     "wzz"
header-img: "img/home-bg.jpg"
catalog: true
tags:
    - JavaScript
    - 设计模式
---

Publish/Subscribe非常适用于事件驱动的JavaScript，通过Pub/Sub，我们可以定制一套事件系统，创建自定义事件。

Pub/Sub实现：

```js
var pubsub={};
(function  (q) {
    var topics={}; //保存每个订阅事件中每个订阅者
    var subUid=-1; //给订阅者编号，用于取消订阅

    q.publish=function  (topic,args) {
        //发布时，没人人订阅这个事件则false
        if (!topics[topic]) {
            return false;
        };

        //获取订阅了这个事件的人数，之后依次调用他们的回调函数
        var subscribers=topics[topic];
        var len=subscribers?subscribers.length:0;
        while(len--){
            subscribers[len].func(topic,args);
        }
        return this;
    }

    //订阅事件，包含订阅的事件名称和相应的回调函数
    q.subscribe=function  (topic,func) {
        //订阅时，不存在则创建一个新的订阅事件
        if (!topics[topic]) {
            topics[topic]=[];
        };
        //保存此订阅者的id号，和相应回调函数
        var token=(++subUid).toString();
        topics[topic].push({
            token:token,
            func:func
        });
        return token;
    }

    //取消订阅
    q.unsubscribe=function(token){
        for(var m in topics){
            if (topics[m]) {
            //根据id号找到此订阅者，删除此订阅者
            for(var i=0,j=topics[m].length;i<j;i++){
                    if (topics[m][i].token===token) {
                        topics[m].splice(i,1);
                        return token;
                    };
                }
            };
        }
        return this;
    };
}(pubsub))
```

实例:

```js
var messageLogger=function(topics,data){
    console.log("Logging"+topics+data)
}
var subscription=pubsub.subscribe("mymessage",messageLogger);
pubsub.publish("mymessage","hello");
pubsub.publish("mymessage",["test","a","b","c"]);
pubsub.publish("mymessage",{name:"wzz",age:"21"});
```

参考资料：《JavaScript设计模式》
